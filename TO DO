
We use ROS middleware to communicate our individual software modules, which automates both process control and inter-process communication. This allows the developer to focus on implementing the functionality of the software. Your task should therefore also revolve around ROS, Linux and Docker.

1. Write a Dockerfile in which you install ROS2 Humble. Use Ubuntu 22.04 as the base image for this, since the ROS packages are already precompiled for this.

2. Write a ROS Node, which writes the current CPU load in 5 seconds intervals as relative value into a log file cpu_load.log. You need to implement the ROS Node in C++ (https://docs.ros.org/en/foxy/Tutorials/Writing-A-Simple-Cpp-Publisher-And-Subscriber.html). To do this, extend your Dockerfile so that the node is automatically started in the Dockerfile. 
   
3. Create a docker-compose.yaml to automatically start and stop your Docker container with all necessary resources.

4. Write a shell script that reads the cpu_load.log file and prints new messages in the file on the commandline. The shell script should run outside the Docker container.

5. Write a shell script that loads the CPU sufficiently to test your pipeline.

Once you have completed the task, package the Dockerfile, ROS workspace, and scripts as an archive and submit it to us. If you have any questions anywhere or something is not clearly worded, just drop us a line.



# Install ROS2 Humble
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    lsb-release \
    && curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | apt-key add - \
    && sh -c 'echo "deb [arch=amd64,arm64] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" > /etc/apt/sources.list.d/ros2.list' \
    && apt-get update && apt-get install -y \
    ros-humble-desktop \
    && rm -rf /var/lib/apt/lists/*

## DOCKER COMMANDS
### Build image
- docker image build --progress=plain --no-cache -t testdocker .
### Run container
- docker run -ti --rm testdocker

## ROS COMMANDS
### Create a package
- ros2 pkg create --build-type ament_cmake cpp_pubsub

modify package.xml 
    - Modify description, email and license fields.
    - Add dependencies after <ament_cmake>
      - <depend>rclcpp</depend>
        <depend>std_msgs</depend>

modify CMakeLists.txt
    - Add after find_package(ament_cmake REQUIRED)
      - find_package(rclcpp REQUIRED)
      - find_package(std_msgs REQUIRED)
      - add_executable(talker src/publisher_member_function.cpp)
      - ament_target_dependencies(talker rclcpp std_msgs)
      - install(TARGETS
            talker
            DESTINATION lib/${PROJECT_NAME})

Build file <--->
        